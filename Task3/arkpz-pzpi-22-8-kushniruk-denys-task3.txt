Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Кафедра програмної інженерії





Лабораторна робота № 3
з дисципліни «Аналіз та рефакторинг коду»








Виконав:									Перевірив:
ст. гр. ПЗПІ-22-8								ст. викладач. 
Кушнірук Денис 								Сокорчук І.П









Харків 2024

1 РОЗРОБКА БІЗНЕС-ЛОГІКИ ТА ФУНКЦІЙ АДМІНІСТРУВАННЯ СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ 

1.1 Мета роботи: 
Розробка бізнес-логики та функції адміністрування серверної частини  програмної системи 

1.2 Хід роботи
1. Розробити бізнес логіку серверної частини програмної системи.

Основні функції бізнес-логіки 
- Управління користувачами та частинами системи: створення, редагування, оновлення або видалення даних.
- Управління освітленням в  ручному або автоматичному режимі.
1 /**
2 * @swagger
3 * /rooms/updateStatus/{roomId}:
4 *   patch:
5 *     summary: Оновити статус кімнати
6 *     description: Оновлення статусу кімнати (увімкнено/вимкнено світло).
7 *     tags: [Rooms]
8 *     parameters:
9 *       - name: roomId
10 *         in: path
11 *         required: true
12 *         description: ID кімнати.
13 *         schema:
14 *           type: string
15 *     requestBody:
16 *       required: true
17 *       content:
18 *         application/json:
19 *           schema:
20 *             type: object
21 *             properties:
22 *               status:
23 *                 type: boolean
24 *                 description: Статус кімнати (увімкнено/вимкнено світло).
25 *                 example: true
26 *     responses:
27 *       200:
28 *         description: Статус кімнати успішно оновлено.
29 *       404:
30 *         description: Кімната не знайдена.
31 */
32 router.patch("/updateStatus/:roomId", async (req, res) => {
33  try {
34    const { status } = req.body;
35    if (typeof status !== "boolean") {
36      return res.status(400).json({ message: "Поле status має бути булевим" });
37    }
38    const updatedRoom = await Room.findByIdAndUpdate(
39      req.params.roomId,
40      { status },
41      { new: true }
42    );
43    if (!updatedRoom) {
44      return res.status(404).send("Кімната не знайдена.");
45    }
46    res
47      .status(200)
48      .json({ message: "Статус кімнати успішно оновлено", room: updatedRoom });
49  } catch (error) {
50    res.status(500).send("Серверна помилка");
51  }
52});
53 module.exports = router;

Реалізація CRUD-операцій
Для сутностей бази даних були створені функції, що забезпечують операції створення, читання, оновлення та видалення даних:
- Колекція logs: відповідає за створення та зберігання даних журналу змін.
- Колекція rooms: відповідає за створення та зберігання даних про кімнати.
- Колекція users: відповідає за створення та зберігання даних про користувача.
- Колекція lights: головна сутність вистеми яки відповідає за освітлення

Основні функції та алгоритми:
1. Реєстрація – користувач заповнює поля в системі, вносячи основні дані (ім'я, прізвище, пароль, та інші);
2. Створення кімнати – користувач створює кімнати для подальшого контролю освітленням в них.
3. Створення сценаріїв – сценарії які будуть використовуватись в освітлені кімнат.
4. Створення розкладу – розклад якому відповідають ввімкнення та вимкнення освітлення.
5. Журнал змін – адміністратори зможуть переглядати журнал змін.

2. Розробити функції адміністрування серверної частини програмної
Ці функції дозволяють керувати користувачами, розкладами, сценаріями, кімнатами та логами, а також забезпечують можливості для реєстрації та авторизації користувачів.
Користувачі (Users)
- Отримання інформації про користувача за ID (GET /users/info/:id)
- Оновлення даних користувача за ID (PUT /users/update/:id)
Кімнати (Rooms)
- Створення нової кімнати (POST /rooms/create)
- Отримання інформації про кімнату за ID (GET /rooms/info/:roomId)
- Оновлення інформації про кімнату за ID (PUT /rooms/update/:roomId)
- Оновлення статусу кімнати (PATCH /rooms/updateStatus/:roomId)
- Видалення кімнати за ID (DELETE /rooms/delete/:roomId)
Логи (Logs)
- Отримання всіх логів (GET /logs/info)
- Створення нового логу (POST /logs/create)
- Отримання логу за ID (GET /logs/info/:logId)
- Видалення логу за ID (DELETE /logs/delete/:logId)
Авторизація (Auth)
- Реєстрація нового користувача (POST /auth/register)
- Авторизація користувача (POST /auth/login)
- Вихід з аккаунту (POST /auth/logout)
Освітлення (Lights)
- Отримання даних про освітлення (GET /lights/:id)
- Перемикання стану освітлення (PUT /lights/:id/togle) 
- Встановлення розкладу освітлення (PUT /lights/:id/schedule)
- Виявлення руху для автоматичного включення (PUT /lights/:id/motion)

1 /**
2 * @swagger
3 * /users/update/{id}:
4 *   put:
5 *     summary: Редагувати дані користувача
6 *     description: Редагувати дані користувача за його ID.
7 *     tags: [Users]
8 *     parameters:
9 *       - in: path
10 *         name: id
11 *         required: true
12 *         schema:
13 *           type: string
14 *         description: ID користувача
15 *     requestBody:
16 *       required: true
17 *       content:
18 *         application/json:
19 *           schema:
20 *             type: object
21 *             properties:
22 *               email:
23 *                 type: string
24 *               firstName:
25 *                 type: string
26 *               lastName:
27 *                 type: string
28 *               profileImage:
29 *                 type: string
30 *             example:
31 *               email: "user@example.com"
32 *               firstName: "Іван"
33 *               lastName: "Іванов"
34 *               profileImage: "https://example.com/profile.jpg"
35 *     responses:
36 *       200:
37 *         description: Дані користувача успішно оновлені.
38 *       404:
39 *         description: Користувача не знайдено.
40 */
41 router.put("/update/:id", async (req, res) => {
42  try {
43    const { email, firstName, lastName, profileImage } = req.body;
44    const user = await User.findById(req.params.id);
45    if (!user) {
46      return res.status(404).json({ message: "Користувача не знайдено." });
47    }
48    // Оновлення тільки тих полів, які були передані
49    if (email) user.email = email;
50    if (firstName) user.firstName = firstName;
51    if (lastName) user.lastName = lastName;
52    if (profileImage) user.profileImage = profileImage;
53    await user.save();
54    res.status(200).json(user);
55  } catch (error) {
56    console.error("Помилка оновлення користувача:", error);
57   res.status(500).json({ message: "Серверна помилка" });
58  }
59 });
60 module.exports = router;

Основні діаграми проектної системи
Ця UML діаграма діяльності описує процес взаємодії користувачів та адміністраторів з серверною частиною системи на різних етапах запитів. Користувач починає процес з реєстрації, створюючи обліковий запис. Після цього сервер здійснює перевірку автентифікації, щоб переконатися, що користувач має доступ до системи. Якщо автентифікація не пройшла, відправляється повідомлення про помилку. Якщо автентифікація пройшла успішно, сервер переходить до перевірки ролі користувача, визначаючи, чи є він звичайним користувачем або адміністратором. Якщо користувач має роль "User", він отримує доступ до операцій створення, читання, оновлення та видалення елементів. Кожна з цих операцій обмежується перевіркою на наявність дозволів для змін. Окрім того, сервер здійснює перевірку та затвердження валідації для користувачів і адміністраторів. Якщо валідація не була схвалена, користувач або адміністратор отримують повідомлення про помилку, а в разі успішної валідації — доступ до операцій із даними. Адміністратор має більше прав доступу, зокрема до операцій, які недоступні для звичайних користувачів. Усі ці етапи забезпечують чітке розмежування прав доступу та важливість перевірок автентифікації та валідації.
 
Рис. 1 - UML діаграма діяльності для серверної частини;

Діаграма демонструє взаємодію двох типів користувачів — звичайного користувача (User) та адміністратора (Admin) — із системою через два клієнтські додатки: DesktopUser та DesktopAdmin та серверну частину бази даних DateBase. Додаток DesktopUser дозволяє користувачам реєструватися, авторизуватися, керувати кімнатами, обирати заздалегідь визначені сценарії автоматизації та налаштовувати розклади для автоматичного ввімкнення чи вимкнення пристроїв. Адміністратори через додаток DesktopAdmin мають доступ до розширеного функціоналу, зокрема, можуть управляти даними користувачів, переглядати журнали подій, редагувати сценарії та розклади, а також змінювати налаштування кімнат із більшими привілеями. Центральний сервер обробляє запити від обох додатків, забезпечуючи логіку системи, управління даними та збереження історії дій у журналах для аудиту. Система побудована за принципом "запит-відповідь" із чітким розподілом функцій між компонентами, що покращує її масштабованість, підтримуваність та безпеку.
 
Рис. 2 – UML діаграма взаємодії для клієнт-серверної частини

Висновок:
У ході лабораторної роботи розроблено бізнес-логика та функції адміністрування серверної частини програмної системи автоматичного управління освітленням в приміщенях.

Посилання на відео: https://youtu.be/-wvxF7uBc6U
